/* components/CompareSlider.module.css */
.wrapper {
  width: min(90vw, var(--maxWidth, 1200px));
  display: grid;
  gap: 0.75rem;
  justify-items: center;
}

.container {
  position: relative;
  width: 100%;
  background: #111;
  overflow: hidden;
  border-radius: 12px;
}

/* --- SHARED CANVAS LAYERING --- */
.canvas {
  position: relative;
  width: 100%;
  height: 100%;
}

/* Base (left) content defines the natural height if aspectRatio is 'auto' */
.base, .overlayClip, .overlayInner {
  position: absolute;
  inset: 0;
}

.base {
  position: relative; /* allow natural height when using images */
}

/* --- IMAGE MODE --- */
.baseImg,
.overlayImg {
  display: block;
  width: 100%;
  height: auto;
  user-select: none;
  pointer-events: none;
}

.overlayImg {
  position: absolute;
  inset: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

/* --- NODE MODE --- */
.baseNode, .overlayNode {
  width: 100%;
  height: 100%;
}

/* clip the right content to the knob position */
.overlayClip {
  overflow: hidden;
}

/* Vertical slider line */
.slider {
  position: absolute;
  top: 0;
  bottom: 0;
  width: 0;
  cursor: ew-resize;
  touch-action: none;
}

.slider::before {
  content: "";
  position: absolute;
  top: 0;
  bottom: 0;
  left: -1px;
  width: 2px;
  background: rgba(255, 255, 255, 0.9);
  box-shadow: 0 0 0 1px rgba(0,0,0,0.15);
}

/* Circular knob */
.knob {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: clamp(28px, 4.5vw, 40px);
  height: clamp(28px, 4.5vw, 40px);
  border-radius: 50%;
  border: 0;
  background: rgba(255, 255, 255, 0.98);
  box-shadow:
    0 1px 4px rgba(0,0,0,0.35),
    0 0 0 2px rgba(0, 0, 0, 0.15);
  cursor: grab;
  outline: none;
}

.knob:active { cursor: grabbing; }

.knob:focus-visible {
  box-shadow:
    0 1px 4px rgba(0,0,0,0.35),
    0 0 0 2px #00e5ff;
}

/* Optional labels */
.legend {
  width: 100%;
  display: flex;
  justify-content: space-between;
  font-size: 0.85rem;
  color: #aaa;
  padding: 0 0.25rem;
  user-select: none;
}

/* helper when aspectRatio = 'auto' but you want minimum height for node mode */
.minH {
  min-height: var(--minHeight, 260px);
  background: #0d0d0d;
}
